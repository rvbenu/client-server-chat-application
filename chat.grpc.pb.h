// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto
#ifndef GRPC_chat_2eproto__INCLUDED
#define GRPC_chat_2eproto__INCLUDED

#include "chat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace chat {

// Define the Chat Service
class ChatService final {
 public:
  static constexpr char const* service_full_name() {
    return "chat.ChatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Account Management
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::chat::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::chat::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    // Messaging
    virtual ::grpc::Status RetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::chat::UndeliveredMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::UndeliveredMessagesResponse>> AsyncRetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::UndeliveredMessagesResponse>>(AsyncRetrieveUndeliveredMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::UndeliveredMessagesResponse>> PrepareAsyncRetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::UndeliveredMessagesResponse>>(PrepareAsyncRetrieveUndeliveredMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::chat::DeleteMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::DeleteMessageResponse>> AsyncDeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::DeleteMessageResponse>>(AsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::DeleteMessageResponse>> PrepareAsyncDeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::DeleteMessageResponse>>(PrepareAsyncDeleteMessageRaw(context, request, cq));
    }
    // Real-time Chat (Bidirectional Streaming)
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>> ChatStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>>(ChatStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>> AsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>>(AsyncChatStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>> PrepareAsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>>(PrepareAsyncChatStreamRaw(context, cq));
    }
    // User Search by Wildcard
    virtual ::grpc::Status SearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::chat::SearchUsersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::SearchUsersResponse>> AsyncSearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::SearchUsersResponse>>(AsyncSearchUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::SearchUsersResponse>> PrepareAsyncSearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chat::SearchUsersResponse>>(PrepareAsyncSearchUsersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Account Management
      virtual void Register(::grpc::ClientContext* context, const ::chat::RegisterRequest* request, ::chat::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::chat::RegisterRequest* request, ::chat::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::chat::LoginRequest* request, ::chat::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::chat::LoginRequest* request, ::chat::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Messaging
      virtual void RetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest* request, ::chat::UndeliveredMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest* request, ::chat::UndeliveredMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest* request, ::chat::DeleteMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest* request, ::chat::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Real-time Chat (Bidirectional Streaming)
      virtual void ChatStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::chat::ChatMessage,::chat::ChatMessage>* reactor) = 0;
      // User Search by Wildcard
      virtual void SearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest* request, ::chat::SearchUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest* request, ::chat::SearchUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::UndeliveredMessagesResponse>* AsyncRetrieveUndeliveredMessagesRaw(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::UndeliveredMessagesResponse>* PrepareAsyncRetrieveUndeliveredMessagesRaw(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::DeleteMessageResponse>* AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::DeleteMessageResponse>* PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>* ChatStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>* AsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::chat::ChatMessage, ::chat::ChatMessage>* PrepareAsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::SearchUsersResponse>* AsyncSearchUsersRaw(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chat::SearchUsersResponse>* PrepareAsyncSearchUsersRaw(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::chat::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::chat::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status RetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::chat::UndeliveredMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::UndeliveredMessagesResponse>> AsyncRetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::UndeliveredMessagesResponse>>(AsyncRetrieveUndeliveredMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::UndeliveredMessagesResponse>> PrepareAsyncRetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::UndeliveredMessagesResponse>>(PrepareAsyncRetrieveUndeliveredMessagesRaw(context, request, cq));
    }
    ::grpc::Status DeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::chat::DeleteMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::DeleteMessageResponse>> AsyncDeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::DeleteMessageResponse>>(AsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::DeleteMessageResponse>> PrepareAsyncDeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::DeleteMessageResponse>>(PrepareAsyncDeleteMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>> ChatStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>>(ChatStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>> AsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>>(AsyncChatStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>> PrepareAsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>>(PrepareAsyncChatStreamRaw(context, cq));
    }
    ::grpc::Status SearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::chat::SearchUsersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::SearchUsersResponse>> AsyncSearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::SearchUsersResponse>>(AsyncSearchUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::SearchUsersResponse>> PrepareAsyncSearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chat::SearchUsersResponse>>(PrepareAsyncSearchUsersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::chat::RegisterRequest* request, ::chat::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::chat::RegisterRequest* request, ::chat::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::chat::LoginRequest* request, ::chat::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::chat::LoginRequest* request, ::chat::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest* request, ::chat::UndeliveredMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void RetrieveUndeliveredMessages(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest* request, ::chat::UndeliveredMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest* request, ::chat::DeleteMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteMessage(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest* request, ::chat::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChatStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::chat::ChatMessage,::chat::ChatMessage>* reactor) override;
      void SearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest* request, ::chat::SearchUsersResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchUsers(::grpc::ClientContext* context, const ::chat::SearchUsersRequest* request, ::chat::SearchUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chat::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::chat::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::chat::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::UndeliveredMessagesResponse>* AsyncRetrieveUndeliveredMessagesRaw(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::UndeliveredMessagesResponse>* PrepareAsyncRetrieveUndeliveredMessagesRaw(::grpc::ClientContext* context, const ::chat::UndeliveredMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::DeleteMessageResponse>* AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::DeleteMessageResponse>* PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::chat::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* ChatStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* AsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* PrepareAsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::SearchUsersResponse>* AsyncSearchUsersRaw(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chat::SearchUsersResponse>* PrepareAsyncSearchUsersRaw(::grpc::ClientContext* context, const ::chat::SearchUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_RetrieveUndeliveredMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ChatStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchUsers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Account Management
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::chat::RegisterRequest* request, ::chat::RegisterResponse* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::chat::LoginRequest* request, ::chat::LoginResponse* response);
    // Messaging
    virtual ::grpc::Status RetrieveUndeliveredMessages(::grpc::ServerContext* context, const ::chat::UndeliveredMessagesRequest* request, ::chat::UndeliveredMessagesResponse* response);
    virtual ::grpc::Status DeleteMessage(::grpc::ServerContext* context, const ::chat::DeleteMessageRequest* request, ::chat::DeleteMessageResponse* response);
    // Real-time Chat (Bidirectional Streaming)
    virtual ::grpc::Status ChatStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* stream);
    // User Search by Wildcard
    virtual ::grpc::Status SearchUsers(::grpc::ServerContext* context, const ::chat::SearchUsersRequest* request, ::chat::SearchUsersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::chat::RegisterRequest* /*request*/, ::chat::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::chat::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::chat::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chat::LoginRequest* /*request*/, ::chat::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::chat::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::chat::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RetrieveUndeliveredMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RetrieveUndeliveredMessages() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RetrieveUndeliveredMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUndeliveredMessages(::grpc::ServerContext* /*context*/, const ::chat::UndeliveredMessagesRequest* /*request*/, ::chat::UndeliveredMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieveUndeliveredMessages(::grpc::ServerContext* context, ::chat::UndeliveredMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::chat::UndeliveredMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::chat::DeleteMessageRequest* /*request*/, ::chat::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMessage(::grpc::ServerContext* context, ::chat::DeleteMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::chat::DeleteMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChatStream() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChatStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchUsers() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SearchUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchUsers(::grpc::ServerContext* /*context*/, const ::chat::SearchUsersRequest* /*request*/, ::chat::SearchUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchUsers(::grpc::ServerContext* context, ::chat::SearchUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::chat::SearchUsersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Login<WithAsyncMethod_RetrieveUndeliveredMessages<WithAsyncMethod_DeleteMessage<WithAsyncMethod_ChatStream<WithAsyncMethod_SearchUsers<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::RegisterRequest, ::chat::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::RegisterRequest* request, ::chat::RegisterResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::chat::RegisterRequest, ::chat::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::RegisterRequest, ::chat::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::chat::RegisterRequest* /*request*/, ::chat::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::RegisterRequest* /*request*/, ::chat::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::LoginRequest, ::chat::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::LoginRequest* request, ::chat::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::chat::LoginRequest, ::chat::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::LoginRequest, ::chat::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chat::LoginRequest* /*request*/, ::chat::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::LoginRequest* /*request*/, ::chat::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RetrieveUndeliveredMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RetrieveUndeliveredMessages() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::UndeliveredMessagesRequest, ::chat::UndeliveredMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::UndeliveredMessagesRequest* request, ::chat::UndeliveredMessagesResponse* response) { return this->RetrieveUndeliveredMessages(context, request, response); }));}
    void SetMessageAllocatorFor_RetrieveUndeliveredMessages(
        ::grpc::MessageAllocator< ::chat::UndeliveredMessagesRequest, ::chat::UndeliveredMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::UndeliveredMessagesRequest, ::chat::UndeliveredMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RetrieveUndeliveredMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUndeliveredMessages(::grpc::ServerContext* /*context*/, const ::chat::UndeliveredMessagesRequest* /*request*/, ::chat::UndeliveredMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RetrieveUndeliveredMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::UndeliveredMessagesRequest* /*request*/, ::chat::UndeliveredMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::DeleteMessageRequest, ::chat::DeleteMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::DeleteMessageRequest* request, ::chat::DeleteMessageResponse* response) { return this->DeleteMessage(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMessage(
        ::grpc::MessageAllocator< ::chat::DeleteMessageRequest, ::chat::DeleteMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::DeleteMessageRequest, ::chat::DeleteMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::chat::DeleteMessageRequest* /*request*/, ::chat::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::DeleteMessageRequest* /*request*/, ::chat::DeleteMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChatStream() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::chat::ChatMessage, ::chat::ChatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ChatStream(context); }));
    }
    ~WithCallbackMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::chat::ChatMessage, ::chat::ChatMessage>* ChatStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchUsers() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::chat::SearchUsersRequest, ::chat::SearchUsersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chat::SearchUsersRequest* request, ::chat::SearchUsersResponse* response) { return this->SearchUsers(context, request, response); }));}
    void SetMessageAllocatorFor_SearchUsers(
        ::grpc::MessageAllocator< ::chat::SearchUsersRequest, ::chat::SearchUsersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chat::SearchUsersRequest, ::chat::SearchUsersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchUsers(::grpc::ServerContext* /*context*/, const ::chat::SearchUsersRequest* /*request*/, ::chat::SearchUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::chat::SearchUsersRequest* /*request*/, ::chat::SearchUsersResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register<WithCallbackMethod_Login<WithCallbackMethod_RetrieveUndeliveredMessages<WithCallbackMethod_DeleteMessage<WithCallbackMethod_ChatStream<WithCallbackMethod_SearchUsers<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::chat::RegisterRequest* /*request*/, ::chat::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chat::LoginRequest* /*request*/, ::chat::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RetrieveUndeliveredMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RetrieveUndeliveredMessages() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RetrieveUndeliveredMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUndeliveredMessages(::grpc::ServerContext* /*context*/, const ::chat::UndeliveredMessagesRequest* /*request*/, ::chat::UndeliveredMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::chat::DeleteMessageRequest* /*request*/, ::chat::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChatStream() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchUsers() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SearchUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchUsers(::grpc::ServerContext* /*context*/, const ::chat::SearchUsersRequest* /*request*/, ::chat::SearchUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::chat::RegisterRequest* /*request*/, ::chat::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chat::LoginRequest* /*request*/, ::chat::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RetrieveUndeliveredMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RetrieveUndeliveredMessages() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RetrieveUndeliveredMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUndeliveredMessages(::grpc::ServerContext* /*context*/, const ::chat::UndeliveredMessagesRequest* /*request*/, ::chat::UndeliveredMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieveUndeliveredMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::chat::DeleteMessageRequest* /*request*/, ::chat::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChatStream() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChatStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchUsers() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SearchUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchUsers(::grpc::ServerContext* /*context*/, const ::chat::SearchUsersRequest* /*request*/, ::chat::SearchUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::chat::RegisterRequest* /*request*/, ::chat::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chat::LoginRequest* /*request*/, ::chat::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RetrieveUndeliveredMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RetrieveUndeliveredMessages() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RetrieveUndeliveredMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_RetrieveUndeliveredMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUndeliveredMessages(::grpc::ServerContext* /*context*/, const ::chat::UndeliveredMessagesRequest* /*request*/, ::chat::UndeliveredMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RetrieveUndeliveredMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::chat::DeleteMessageRequest* /*request*/, ::chat::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChatStream() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ChatStream(context); }));
    }
    ~WithRawCallbackMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ChatStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchUsers() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchUsers(::grpc::ServerContext* /*context*/, const ::chat::SearchUsersRequest* /*request*/, ::chat::SearchUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::RegisterRequest, ::chat::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::RegisterRequest, ::chat::RegisterResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::chat::RegisterRequest* /*request*/, ::chat::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::RegisterRequest,::chat::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::LoginRequest, ::chat::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::LoginRequest, ::chat::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chat::LoginRequest* /*request*/, ::chat::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::LoginRequest,::chat::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RetrieveUndeliveredMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RetrieveUndeliveredMessages() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::UndeliveredMessagesRequest, ::chat::UndeliveredMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::UndeliveredMessagesRequest, ::chat::UndeliveredMessagesResponse>* streamer) {
                       return this->StreamedRetrieveUndeliveredMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RetrieveUndeliveredMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RetrieveUndeliveredMessages(::grpc::ServerContext* /*context*/, const ::chat::UndeliveredMessagesRequest* /*request*/, ::chat::UndeliveredMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRetrieveUndeliveredMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::UndeliveredMessagesRequest,::chat::UndeliveredMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::DeleteMessageRequest, ::chat::DeleteMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::DeleteMessageRequest, ::chat::DeleteMessageResponse>* streamer) {
                       return this->StreamedDeleteMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMessage(::grpc::ServerContext* /*context*/, const ::chat::DeleteMessageRequest* /*request*/, ::chat::DeleteMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::DeleteMessageRequest,::chat::DeleteMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchUsers() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chat::SearchUsersRequest, ::chat::SearchUsersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chat::SearchUsersRequest, ::chat::SearchUsersResponse>* streamer) {
                       return this->StreamedSearchUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchUsers(::grpc::ServerContext* /*context*/, const ::chat::SearchUsersRequest* /*request*/, ::chat::SearchUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chat::SearchUsersRequest,::chat::SearchUsersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_RetrieveUndeliveredMessages<WithStreamedUnaryMethod_DeleteMessage<WithStreamedUnaryMethod_SearchUsers<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_RetrieveUndeliveredMessages<WithStreamedUnaryMethod_DeleteMessage<WithStreamedUnaryMethod_SearchUsers<Service > > > > > StreamedService;
};

}  // namespace chat


#endif  // GRPC_chat_2eproto__INCLUDED
